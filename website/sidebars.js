/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const { join, parse } = require('node:path')
const fs = require('node:fs')

function isDirectory(path){
    if (!fs.existsSync(path))
        return false

    const stat = fs.statSync(path)
    return stat.isDirectory()
}

function createCliCategories(from = 'cli', level = 0){
    const root = join(process.env['PROJECT_ROOT'], 'docs', from)
    const markdownFiles = fs.readdirSync(root).filter(file => /^.+\.mdx?$/.test(file))

    return markdownFiles.map(file => {

        const commandName = parse(file).name

        const subCommandsDir = join(root, commandName)

        const id = join(from, commandName)

        const label = commandName === 'blaze' 
            ? 'Global options' 
            : commandName

        return isDirectory(subCommandsDir.toString())
            ? {
                type: 'category',
                link: {
                    id,
                    type: 'doc',
                },
                label,
                items: createCliCategories(id, level + 1)
            }
            : {
                id,
                type: 'doc',
                label,
            }
    })
}

const sidebars = {
    // By default, Docusaurus generates a sidebar from the docs folder structure
    // tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],

    // But you can create a sidebar manually
  
    tutorialSidebar: [
        'introduction',
        {
            type: 'category',
            label: 'Guides',
            items: [
                'get-started',
                'workspace',
                'writing-targets',
                'running-targets',
                'caching',
                'dependencies',
                'running-commands',
                'templating',
                'environment'
            ].map(name => `guides/${name}`)
        },
        {
            type: 'category',
            label: 'CLI reference',
            items: createCliCategories()
        },
        {
            type: 'category',
            label: 'Configuration reference',
            items: [
                {
                    type: 'category',
                    label: 'Workspace',
                    items: [
                        'schema',
                        'variables'
                    ].map(name => `configuration/workspace/${name}`)
                },
                {
                    type: 'category',
                    label: 'Projects',
                    items: [
                        'schema',
                        'variables'
                    ].map(name => `configuration/project/${name}`)
                }
            ]
        },
        {
            type: 'category',
            label: 'Executors',
            items: [
                {
                    type: 'doc',
                    label: 'What is an executor ?',
                    id: 'executors/executors'
                },
                {
                    type: 'category',
                    label: 'Standard executors',
                    items: [
                        'commands',
                        'script'
                    ].map(name => ({ type: 'doc', id: `executors/std/${name}`  }))
                },
                {
                    type: 'category',
                    label: 'Resolve executors',
                    items: [
                        'file-system',
                        'git',
                        'cargo',
                        'npm',
                    ].map(name => ({ type: 'doc', id: `executors/resolvers/${name}`}))
                },
                {
                    type: 'category',
                    label: 'Writing executors',
                    items: [
                        'rust',
                        'node'
                    ].map(name => `executors/languages/${name}`)
                }
            ]
        }
    ]
}

module.exports = sidebars
